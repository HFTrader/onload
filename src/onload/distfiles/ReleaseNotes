Onload-9.0.0
============

 These release notes are a work in progress and have no validity prior to
 forming part of an Onload release.

 This is a feature release of Onload with modernised internal interfaces
 between software components (control plane, TCPDirect and sfc net driver),
 adding new features and support for new operating systems and kernels since
 the earlier OpenOnload-8.1.x releases.

 An updated version 6.0.0.1000 of the sfc net driver is included for
 X2-based network cards.


Linux distribution support
--------------------------

 This package can be installed on:
 - Red Hat Enterprise Linux 8.6 - 8.10
 - Red Hat Enterprise Linux 9.2 - 9.4
 - Canonical Ubuntu Server LTS 22.04 and 24.04
 - Debian 12 "Bookworm"
 - Linux kernels 5.11 - 6.9


Sub-nanosecond timestamp resolution
-----------------------------------

Onload and ef_vi now internally process hardware timestamps with
sub-nanosecond resolution.

Timestamps retrieved via the Onload Extensions API now have the fractional
nanosecond part populated for hardware timestamps and an additional field
providing the associated timestamping flags. See extensions_timestamping.h
for details.

For ef_vi applications using timestamps:
 - ef_vi_receive_get_precise_timestamp() is the new preferred interface to
   obtain receive timestamps for all NICs. This populates an ef_precisetime
   object that includes a fractional nanosecond part and sync flags.
 - The sync flags associated with a transmit timestamp should continue to
   be accessed with the EF_EVENT_TX_TIMESTAMP_SYNC_FLAGS macro but it will
   no longer be possible to read the low order nanosecond bits to obtain the
   same flags as they now contain the full integral nanoseconds part.
 - The EF_EVENT_TX_WITH_TIMESTAMP_NSEC_FRAC16 macro provides access to the
   fractional nanosecond part of an event as a 16-bit quantity. For example,
   (uint16_t) 0x8000 represents half a nanosecond.

For X2 and X3 the resolution of the timestamp value is 1/4 ns but note that
the granularity of timestamping clock is hardware-dependent and
coarser than the timestamp resolution now available through the API.


Revised Onload Extensions API (v2) for timestamping
---------------------------------------------------

A new version of the Onload Extensions API for timestamping has been added
to enable applications to interpret extension and standard timestamps
reliably irrespective of runtime configuration changes by presenting the
extended timestamps in a new, distinct, CMSG type. The old (v1) form of
extension timestamping continues to work as before.

To enable the new form, pass standard SO_TIMESTAMPING-style
SOF_TIMESTAMPING_* flags to a new SO_TIMETAMPING_OOEXT setsockopt option.
Trailer timestamps can be enabled using the extended flag
SOF_TIMESTAMPING_OOEXT_TRAILER. For example:

  struct so_timestamping val = {
    .flags = SOF_TIMESTAMPING_TX_HARDWARE
           | SOF_TIMESTAMPING_RX_HARDWARE
           | SOF_TIMESTAMPING_RAW_HARDWARE
           | SOF_TIMESTAMPING_OOEXT_TRAILER
  };
  setsockopt(fd, SOL_SOCKET, SO_TIMESTAMPING_OOEXT, &val, sizeof val);

Timestamps are delivered with a CMSG of type SCM_TIMESTAMPING_OOEXT. Each
available timestamp in the payload is provided in a
'struct scm_timestamping_ooext' where the 'type' field has a combination of
the elemental SOF_TIMESTAMPING_* flags to indicate what it is and the
'timestamp' field is the sub-nanosecond precision timestamp with sync
flags of the form 'struct onload_timestamp'. The possible retrieved timestamp
types are:

  SOF_TIMESTAMPING_RX_SOFTWARE | SOF_TIMESTAMPING_SOFTWARE
  SOF_TIMESTAMPING_RX_HARDWARE | SOF_TIMESTAMPING_SYS_HARDWARE
  SOF_TIMESTAMPING_RX_HARDWARE | SOF_TIMESTAMPING_RAW_HARDWARE
  SOF_TIMESTAMPING_RX_HARDWARE | SOF_TIMESTAMPING_OOEXT_TRAILER
  SOF_TIMESTAMPING_TX_HARDWARE | SOF_TIMESTAMPING_SYS_HARDWARE
  SOF_TIMESTAMPING_TX_HARDWARE | SOF_TIMESTAMPING_RAW_HARDWARE


DKMS packaging for Debian
-------------------------

Added the option for Debian users to install the kernel modules for
onload using DKMS. This is provided as an alternative to using the
existing source installation via module-assistant.


Unsupported SN1000 functionality removed
----------------------------------------

Functionality for the unsupported SN1000 adapter and SN1000-specific
experimental onload extensions hlrx API defined in extensions_zc_hlrx.h have
been removed.


Filter feature reporting for X3522 through ef_vi capabilities API
-----------------------------------------------------------------

Previous versions of onload were inconsistent in how filter support was
reported in the case of X3522 where some filters are provided through hardware
support and some are emulated in software. The behaviour has now changed such
that a filter is only reported as supported if it can be provided in hardware.


Additional hardware filter support on X3522
-------------------------------------------

Support has been added for ef_vi to use the hardware support for IP Proto and
multicast-mismatch filters where supported by the NIC.


Support for unaccelerated RX sockets with accelerated TX
--------------------------------------------------------

A new function has been added to extensions library: onload_socket_rx_nonaccel.
This function allows users to create a socket which will only accelerate tx
traffic. This means that you can now call connect() on a UDP socket without
installing a filter. Accelerated tx is only supported on UDP sockets, TCP
sockets are not accelerated.


New onload-devel package
------------------------

This package contains all of the header files used by onload, and allows users
to build applications that depend on these headers (such as TCPDirect) without
having to set up custom include paths.

Headers can also be installed via new '--headers' option in 'onload_install'.


Improved handling of filter operations during NIC reset
-------------------------------------------------------

Previously, if a filter insertion operation coincided with a NIC reset there was
the possibility of an orphaned filter being installed on a NIC that wasn't
resetting. Now, if a filter insertion operation fails for one NIC onload will
remove any of these orphaned filters. Additionally, if EF_NO_FAIL is set to 0
there will be more consistent errno value if filters were not installed. The
errno value will now be 105 (ENOBUFS) if this type of failure occurs.

(c) Copyright 2024 Advanced Micro Devices, Inc.
